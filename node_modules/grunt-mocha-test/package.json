{
  "name": "grunt-mocha-test",
  "description": "A grunt task for running server side mocha tests",
  "version": "0.8.2",
  "homepage": "https://github.com/pghalliday/grunt-mocha-test",
  "author": {
    "name": "Peter Halliday",
    "email": "pghalliday@gmail.com",
    "url": "http://stuffpetedoes.blogspot.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pghalliday/grunt-mocha-test.git"
  },
  "bugs": {
    "url": "https://github.com/pghalliday/grunt-mocha-test/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pghalliday/grunt-mocha-test/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-mocha-test": "bin/grunt-mocha-test"
  },
  "engines": {
    "node": ">= 0.10.4"
  },
  "scripts": {
    "test": "grunt"
  },
  "config": {
    "travis-cov": {
      "threshold": 100
    }
  },
  "dependencies": {
    "mocha": "~1.14.0"
  },
  "devDependencies": {
    "grunt-cli": "~0.1.11",
    "grunt": "~0.4.2",
    "chai": "~1.8.1",
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-blanket": "~0.0.8",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "travis-cov": "git+https://github.com/kitcambridge/travis-cov.git#config",
    "coffee-script": "~1.6.3"
  },
  "keywords": [
    "gruntplugin",
    "mocha",
    "test"
  ],
  "readme": "# grunt-mocha-test\n\n[![Build Status](https://travis-ci.org/pghalliday/grunt-mocha-test.png)](https://travis-ci.org/pghalliday/grunt-mocha-test)\n[![Dependency Status](https://gemnasium.com/pghalliday/grunt-mocha-test.png)](https://gemnasium.com/pghalliday/grunt-mocha-test)\n\nA grunt task for running server side mocha tests\n\n## Usage\n\nInstall next to your project's Gruntfile.js with: \n\n```\n$ npm install grunt-mocha-test\n```\n\n### Running tests\n\nHere is a simple example gruntfile if you just want to run tests\n\n```javascript\nmodule.exports = function(grunt) {\n\n  // Add the grunt-mocha-test tasks.\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    // Configure a mochaTest task\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n\n};\n```\n\nThe following mocha options are supported\n\n- grep\n- ui\n- reporter\n- timeout\n- invert\n- ignoreLeaks\n- growl\n- globals\n- bail\n- require\n- colors (specify as \"colors: true\")\n\n### Specifying compilers\n\nThe Mocha `--compilers` option is almost identical to the `--require` option but with additional functionality for use with the Mocha `--watch` mode. As the `--watch` mode is not relevant for this plugin there is no need to implement a separate `compilers` option and actually the `require` option should be used instead.\n\nThe following example shows the use of the CoffeeScript compiler.\n\n```\n$ npm install coffee-script\n```\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: 'coffee-script'\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nIn order to make this more user friendly the `require` option can take either a single file or an array of files in case you have other globals you wish to require.\n\neg.\n\n```javascript\nmochaTest: {\n  test: {\n    options: {\n      reporter: 'spec',\n      require: [\n        'coffee-script',\n        './globals.js'\n      ]\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\nNB. The `require` option can only be used with Javascript files, ie. it is not possible to specify a `./globals.coffee` in the above example.\n\n### Specifying a Mocha module\n\nIf you would like to use a different version of Mocha than the one packaged with this plugin, you can specify the module with the `mocha` option:\n\n```\nmochaTest: {\n  test: {\n    options: {\n      mocha: require('mocha')\n    },\n    src: ['test/**/*.coffee']\n  }\n}\n```\n\n### Generating coverage reports\n\nHere is an example gruntfile that registers 2 test tasks, 1 to run the tests and 1 to generate a coverage report using `blanket.js` to instrument the javascript on the fly.\n\n```\n$ npm install blanket\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          // Require blanket wrapper here to instrument other required\n          // files on the fly. \n          //\n          // NB. We cannot require blanket directly as it\n          // detects that we are not running mocha cli and loads differently.\n          //\n          // NNB. As mocha is 'clever' enough to only run the tests once for\n          // each file the following coverage task does not actually run any\n          // tests which is why the coverage instrumentation has to be done here\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      coverage: {\n        options: {\n          reporter: 'html-cov',\n          // use the quiet flag to suppress the mocha console output\n          quiet: true,\n          // specify a destination file to capture the mocha\n          // output (the quiet option does not suppress this)\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nAs noted above it is necessary to wrap the blanket require when calling mocha programatically so `coverage/blanket.js` should look something like this.\n\n```javascript\nrequire('blanket')({\n  // Only files that match the pattern will be instrumented\n  pattern: '/src/'\n});\n```\n\n### Failing tests if a coverage threshold is not reached\n\nBuilding on the previous example, if you wish to have your tests fail if it falls below a certain coverage threshold then I advise using the `travis-cov` reporter\n\n```\n$ npm install travis-cov\n```\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          require: 'coverage/blanket'\n        },\n        src: ['test/**/*.js']\n      },\n      'html-cov': {\n        options: {\n          reporter: 'html-cov',\n          quiet: true,\n          captureFile: 'coverage.html'\n        },\n        src: ['test/**/*.js']\n      },\n      // The travis-cov reporter will fail the tests if the\n      // coverage falls below the threshold configured in package.json\n      'travis-cov': {\n        options: {\n          reporter: 'travis-cov'\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\nDon't forget to update `package.json` with options for `travis-cov`, for example:\n\n```javascript\n  ...\n\n  \"scripts\": {\n    \"test\": \"grunt\",\n    \"travis-cov\": {\n      // Yes, I like to set the coverage threshold to 100% ;)\n      \"threshold\": 100\n    }\n  },\n\n  ...\n```\n\nNB. This is no longer supported in the latest version of NPM where `scripts` can only be strings. There is currently a pull request open on `travis-cov` to move the configuration to the `config` entry.\n\nhttps://github.com/alex-seville/travis-cov/issues/2\n\n### Running in permanent environments (like watch)\n\nIn some instances, for example when you are running grunt-mocha-test in a grunt watch environment using the `spawn: false` option, you might get in a spot where each test is run only once. After that it will be ignored until\nyou always get: `0 passing` as a result of your tests.\n\nThis happens because mocha loads your test using require. Thus once it has been loaded once in a specific process, it won't run again. To prevent this from happening, use the `clearRequireCache` option (default value is `false`).\n\nHere is an example allowing you to run only the modified tests when possible:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-mocha-test');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.initConfig({\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          clearRequireCache: true\n        },\n        src: ['test/**/*.js']\n      },\n    },\n\n    watch: {\n      js: {\n        options: {\n          spawn: false,\n        },\n        files: '**/*.js',\n        tasks: ['check']\n      }\n    }\n  });\n\n  // On watch events configure mochaTest to run only on the test if it is one\n  // otherwise, run the whole testsuite\n  var defaultSimpleSrc = grunt.config('mochaTest.simple.src');\n  grunt.event.on('watch', function(action, filepath) {\n    grunt.config('mochaTest.simple.src', defaultSimpleSrc);\n    if (filepath.match('test/')) {\n      grunt.config('mochaTest.simple.src', filepath);\n    }\n  });\n\n  grunt.registerTask('default', 'mochaTest');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using: \n\n```\n$ npm test\n```\n\n### Using Vagrant\nTo use the Vagrantfile you will also need to install the following bindler plugin to manage the other plugin dependencies.\n\n```\nvagrant plugin install bindler\nvagrant bindler setup\n```\n\nThen install the required plugins with\n\n```\nvagrant plugin bundle\n```\n\n## License\nCopyright &copy; 2013 Peter Halliday  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-mocha-test@0.8.2",
  "_from": "grunt-mocha-test@~0.8.2"
}
