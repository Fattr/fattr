{
  "author": {
    "name": "Elliot Foster",
    "email": "github@firetaco.com"
  },
  "name": "mocha-mongoose",
  "description": "Test helpers for using mongodb with mocha",
  "version": "1.0.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/elliotf/mocha-mongoose"
  },
  "scripts": {
    "test": "make test"
  },
  "peerDependencies": {
    "mongodb": "~1",
    "mocha": "~1"
  },
  "devDependencies": {
    "mocha": "~1",
    "mongodb": "~1",
    "mongoose": "~3",
    "nodemon": "~0",
    "chai": "~1"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*",
    "npm": ">= 1.2"
  },
  "readme": "mocha-mongoose\n==============\n\nTest helpers for using mongoose with mocha.\n\nSee the example spec (copied below) for more details.\n\n[![Build Status](https://secure.travis-ci.org/elliotf/mocha-mongoose.png)](http://travis-ci.org/elliotf/mocha-mongoose)\n\n## Installation\n\n1. install via npm\n\n    $ npm install mocha-mongoose\n\n1. require mocha-mongoose in your spec helper (easier) or in each spec file\n\n    require('mocha-mongoose')('mongodb://your-mongodb-url-here');\n\n1. mocha-mongoose will automatically clear all of your collections before each spec run\n\n## Example usage of automatically clearing the DB between specs:\n\nThis is a copy of example/test.js\n\n    var dbURI    = 'mongodb://localhost/demo-app-clearing-db'\n      , should   = require('chai').should()\n      , mongoose = require('mongoose')\n      , Dummy    = mongoose.model('Dummy', new mongoose.Schema({a:Number}))\n      , clearDB  = require('mocha-mongoose')(dbURI)\n    ;\n\n    describe(\"Example spec for a model\", function() {\n      beforeEach(function(done) {\n        if (mongoose.connection.db) return done();\n\n        mongoose.connect(dbURI, done);\n      });\n\n      it(\"can be saved\", function(done) {\n        new Dummy({a: 1}).save(done);\n      });\n\n      it(\"can be listed\", function(done) {\n        new Dummy({a: 1}).save(function(err, model){\n          if (err) return done(err);\n\n          new Dummy({a: 2}).save(function(err, model){\n            if (err) return done(err);\n\n            Dummy.find({}, function(err, docs){\n              if (err) return done(err);\n\n              // without clearing the DB between specs, this would be 3\n              docs.length.should.equal(2);\n              done();\n            });\n          });\n        });\n      });\n\n      it(\"can clear the DB on demand\", function(done) {\n        new Dummy({a: 5}).save(function(err, model){\n          if (err) return done(err);\n\n          clearDB(function(err){\n            if (err) return done(err);\n\n            Dummy.find({}, function(err, docs){\n              if (err) return done(err);\n\n              console.log(docs);\n\n              docs.length.should.equal(0);\n              done();\n            });\n          });\n        });\n      });\n    });\n\n## Example usage of manually clearing the DB:\n\nThis is a copy of example/manual.js\n\n    var dbURI    = 'mongodb://localhost/demo-app-clearing-db'\n      , expect   = require('chai').expect\n      , mongoose = require('mongoose')\n      , Dummy    = mongoose.model('Dummy', new mongoose.Schema({a:Number}))\n      , clearDB  = require('mocha-mongoose')(dbURI, {noClear: true})\n    ;\n\n    describe(\"Example spec for a model\", function() {\n      before(function(done) {\n        if (mongoose.connection.db) return done();\n\n        mongoose.connect(dbURI, done);\n      });\n\n      before(function(done) {\n        clearDB(done);\n      });\n\n      it(\"can be saved\", function(done) {\n        Dummy.create({a: 1}, done);\n      });\n\n      it(\"can save another\", function(done) {\n        Dummy.create({a: 2}, done);\n      });\n\n      it(\"can be listed\", function(done) {\n         Dummy.find({}, function(err, models){\n          expect(err).to.not.exist;\n          expect(models).to.have.length(2);\n\n          done();\n         });\n      });\n\n      it(\"can clear the DB on demand\", function(done) {\n        Dummy.count(function(err, count){\n          expect(err).to.not.exist;\n          expect(count).to.equal(2);\n\n          clearDB(function(err){\n            expect(err).to.not.exist;\n\n            Dummy.find({}, function(err, docs){\n              expect(err).to.not.exist;\n\n              expect(docs.length).to.equal(0);\n              done();\n            });\n          });\n        });\n      });\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/elliotf/mocha-mongoose/issues"
  },
  "homepage": "https://github.com/elliotf/mocha-mongoose",
  "dependencies": {},
  "_id": "mocha-mongoose@1.0.1",
  "_from": "mocha-mongoose@~1.0.1"
}
